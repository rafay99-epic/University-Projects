#include "pch.h"
#include<iostream>
#include<string>
#include<fstream>
using namespace std;

struct itemnode;
struct categorynode
{
	string name;
	string id;

	int ilength = 0;
	itemnode* ihead;
	itemnode* ilast;

	categorynode *next;
};
class category
{
protected:
	int length;
	categorynode* chead;
	categorynode* clast;

public:
	category()
	{
		length = 0;
		chead = NULL;
		clast = NULL;
	}

	categorynode* getchead()
	{
		return chead;
	}

	int getclength()
	{
		return length;
	}

	categorynode* getclast()
	{
		return clast;
	}

	void Addcategory()
	{
		string name;
		string ID;

		cout << "Enter the Name of category you want to add :";
		cin >> name;
		cout << "Enter the ID of category you want to add :";
		cin >> ID;

		categorynode*temp = clast;
		categorynode*newnode = new categorynode;
		newnode->name = name;
		newnode->id = ID;
		newnode->next = NULL;

		if (length == 0)
		{
			chead = newnode;
			clast = newnode;
		}
		else
		{
			temp->next = newnode;
			clast = newnode;
		}
		length++;
		cout << "Length : " << length << endl;
	}

	int search(string name)
	{
		categorynode *temp = chead;
		int index = -1;
		for (int i = 0; i < length; i++)
		{
			if (temp->name == name)
			{
				index = i;
				return index;
			}
			temp = temp->next;
		}
		return index;
	}

	void deletecategory()
	{
		string ID;
		cout << "Enter the ID of category to delete : ";
		cin >> ID;
		int flag = 0;
		int count = 0;

		categorynode* current = chead;
		categorynode* temp = new categorynode;
		categorynode* temp2 = new categorynode;
		temp = chead;

		while (current != NULL)
		{
			if (current->id == ID) {
				flag = 1;
				break;
			}
			count++;
			current = current->next;
		}
		if (flag == 0)
		{
			cout << "Category not found" << endl;
		}
		else
		{
			if (count == 0)
			{
				chead = temp->next;
				delete temp;
				length--;
			}
			else if (count == (length - 1))
			{
				for (int i = 1; i < (length - 1); i++)
					temp = temp->next;
				delete clast;
				clast = temp;
				temp->next = NULL;
				length--;
			}
			else
			{
				length--;
				for (int i = 1; i < count; i++)
					temp = temp->next;
				temp2 = temp->next;
				temp->next = temp2->next;

				delete temp2;
			}
		}
	}
	
	void save()
	{
		ofstream file("D:\\CATEGORY.txt");
		categorynode* temp = chead;
		categorynode* temp2 = NULL;
		while (temp != NULL)
		{
			file << temp->name << "\n";
			file << temp->id << "\n";
			temp2 = temp;
			temp = temp->next;
			delete temp2;
		}
		file.close();
	}

};

struct itemnode
{
	string name;
	string id;
	float price;
	int nofitems;

	itemnode *next;
};
class item
{
private:
	category c;

public:
	item()
	{
		/*length = 0;
		ihead = ilast = NULL;*/
	}

	void Additem(int index, categorynode *ctemp)
	{

		cout << "Index = " << index << endl;
		cout << "Address = " << ctemp << endl;

		for (int i = 0; i < index; i++)
		{
			ctemp = ctemp->next;
		}
		cout << "Address = " << ctemp << endl;

		string name;
		string id;
		float price;
		int noofitems;

		cout << "Enter the Name of item to add:";
		cin >> name;
		cout << "Enter the Id of item to add:";
		cin >> id;
		cout << "Enter the price of item to add:";
		cin >> price;
		cout << "Enter the total no of items to add:";
		cin >> noofitems;


		itemnode*itemp = ctemp->ilast;
		itemnode*newnode = new itemnode;
		newnode->name = name;
		newnode->id = id;
		newnode->price = price;
		newnode->nofitems = noofitems;
		newnode->next = NULL;
		cout << ctemp->ilength << endl;
		if (ctemp->ilength == 0)
		{
			ctemp->ihead = newnode;
			ctemp->ilast = newnode;
		}
		else
		{
			itemp->next = newnode;
			ctemp->ilast = newnode;
		}
		ctemp->ilength++;
	}

	float searchitem(int index, categorynode *ctemp, string ID)
	{

		for (int i = 0; i < index; i++)
		{
			ctemp = ctemp->next;
		}
		int flag = -1;

		itemnode*itemp = ctemp->ihead;
		for (int i = 0; i < ctemp->ilength; i++)
		{
			if (itemp->id == ID)
			{
				cout << "Item found " << endl;
				itemp->nofitems--;
				return itemp->price;
				flag++;
			}
			itemp = itemp->next;
		}
		if (flag == -1)
		{
			return -1;
		}
	}

	string searchitemname(int index, categorynode *ctemp, string ID)
	{
		for (int i = 0; i < index; i++)
		{
			ctemp = ctemp->next;
		}

		itemnode*itemp = ctemp->ihead;
		for (int i = 0; i < ctemp->ilength; i++)
		{
			if (itemp->id == ID)
			{
				return itemp->name;
			}
			itemp = itemp->next;
		}
	}

	void deleteitem(int index, categorynode *ctemp)
	{
		cout << "Started Deleting" << endl;

		for (int i = 0; i < index; i++)
		{
			ctemp = ctemp->next;
		}

		cout << ctemp << endl;
		itemnode* current = ctemp->ihead;
		itemnode* temp = new itemnode;
		itemnode* temp2 = new itemnode;
		temp = ctemp->ihead;

		string ID;
		cout << "Enter the ID of item to delete : ";
		cin >> ID;
		int count = 0;
		int flag = 0;

		while (current != NULL)
		{
			if (current->id == ID)
			{
				flag = 1;
				break;
			}
			count++;
			current = current->next;
		}
		if (flag == 0)
			cout << "item not found" << endl;
		else
		{
			if (count == 0)
			{
				ctemp->ihead = temp->next;
				delete temp;
				ctemp->ilength--;
			}
			else if (count == (ctemp->ilength - 1))
			{
				for (int i = 1; i < (ctemp->ilength - 1); i++)
					temp = temp->next;
				delete ctemp->ilast;
				ctemp->ilast = temp;
				temp->next = NULL;
				ctemp->ilength--;
			}
			else
			{
				ctemp->ilength--;
				for (int i = 1; i < count; i++)
					temp = temp->next;
				temp2 = temp->next;
				temp->next = temp2->next;

				delete temp2;
			}
		}
	}

};

struct customernode
{
	string firstname;
	string lastname;
	string phoneno;
	string id;
	float bill;
	float balance;
	int year;
	int day;
	int month;
	customernode *next;
};
class customer : public item
{
private:
	int length;
	customernode* head;
	customernode* last;
public:
	customer()
	{
		length = 0;
		head = NULL;
		last = NULL;
	}

	void Addcustomer()
	{
		string firstname;
		string lastname;
		string phoneno;
		string id;
		float balance;

		cout << "Enter the First Name of Customer:";
		cin >> firstname;
		cout << "Enter the Last Name of Customer:";
		cin >> lastname;
		cout << "Enter the Phone Number of Customer:";
		cin >> phoneno;
		cout << "Enter the Id of Customer:";
		cin >> id;
		cout << "Enter the Customer balance :";
		cin >> balance;

		customernode*temp = last;
		customernode*newnode = new customernode;
		newnode->firstname = firstname;
		newnode->lastname = lastname;
		newnode->phoneno = phoneno;
		newnode->id = id;
		newnode->balance = balance;
		newnode->next = NULL;

		if (length == 0)
		{
			head = newnode;
			last = newnode;
		}
		else
		{
			temp->next = newnode;
			last = newnode;
		}
		length++;
	}



	customernode* gethead()
	{
		return head;
	}

	int getcustlength()
	{
		return length;
	}

	void Dropcustomer()
	{
		string ID;
		cout << "Enter the ID of Customer to drop : ";
		cin >> ID;
		int flag = 0;
		int count = 0;

		customernode* current = head;
		customernode* temp = new customernode;
		customernode* temp2 = new customernode;
		temp = head;

		while (current != NULL)
		{
			if (current->id == ID) {
				flag = 1;
				break;
			}
			count++;
			current = current->next;
		}

		if (flag == 0)
		{
			cout << "Customer is not registered" << endl;
		}
		else
		{
			if (temp->balance <= 0)
			{
				if (count == 0)
				{
					head = temp->next;
					delete temp;
					length--;
				}
				else if (count == (length - 1))
				{
					for (int i = 1; i < (length - 1); i++)
						temp = temp->next;
					delete last;
					last = temp;
					temp->next = NULL;
					length--;
				}
				else
				{
					length--;
					for (int i = 1; i < count; i++)
						temp = temp->next;
					temp2 = temp->next;
					temp->next = temp2->next;

					delete temp2;
				}
			}
		}
	}


	int searchcustomer(string id)
	{
		customernode *temp = head;
		int flag = 0;
		for (int i = 0; i < length; i++)
		{
			if (temp->id == id)
			{
				flag++;
				return i;
				break;
			}
			temp = temp->next;
		}
		if (flag == 0) {
			return -1;
		}
	}

};

void main()
{
	category cat;
	item i1;
	customer cust;
	string cname;
	int index = cat.search(cname);
	categorynode *ctemp = cat.getchead();
	int option;
	int choice;
	do
	{
		cout << endl << endl << "press 1 to add new category" << endl;
		cout << "press 2 to delete category" << endl;
		cout << "press 3 to add new item" << endl;
		cout << "press 4 to delete item" << endl;
		cout << "press 5 to issue bills " << endl;
		cout << "press 6 to recieve bills" << endl;
		cout << "press 7 to save data of category" << endl;
		cin >> option;
		switch (option)
		{
		case 1:
		{
			cat.Addcategory();
		}
		break;
		case 2:
		{
			cat.deletecategory();
		}
		break;
		case 3:
		{
			cout << "In which category you want to add item : ";
			cin >> cname;
			index = cat.search(cname);
			ctemp = cat.getchead();

			i1.Additem(index, ctemp);
		}
		break;
		case 4:
		{
			cout << "From which category you want to delete item : ";
			cin >> cname;
			index = cat.search(cname);
			cout << "Index = " << cat.search(cname) << endl;
			ctemp = cat.getchead();
			for (int i = 1; i < index; i++)
			{
				ctemp = ctemp->next;
			}
			ctemp = cat.getchead();
			i1.deleteitem(index, ctemp);
		}
		break;
		case 5:
		{
			int index1 = 0;
			string cname;
			string exit;
			customernode *current = cust.gethead();
			categorynode* ctemp = cat.getchead();
			string id;
			cin >> id;
			cout << "Enter the ID of customer to search :  ";
			int index = 0;
			string ID;
			index = cust.searchcustomer(id);
			if (index == -1)
			{
				cout << "Customer is not registered" << endl;
			}
			else
			{
				for (int i = 0; i < index; i++)
				{
					current = current->next;
				}
				if (current->balance < 1000)
				{
					do
					{
						cout << "From which category you want to buy item : ";
						cin >> cname;
						index1 = cat.search(cname);
						ctemp = cat.getchead();
						cout << "Enter the ID of item which customer want to buy :  ";
						cin >> ID;
						if (i1.searchitem(index1, ctemp, ID) == -1)
						{
							cout << "Item is not in the mart" << endl;
						}
						else
						{
							current->bill = current->bill + i1.searchitem(index1, ctemp, ID);
							cout << "Name of item : " << i1.searchitemname(index1, ctemp, ID) << endl;
							cout << "Price of item : " << i1.searchitem(index1, ctemp, ID) << endl;
						}
						cout << "Enter 'e' if customer has buyed all items : " << endl;
						cin >> exit;
					} while (exit == "e");
				}
			}
			cout << "enter the due date of bill" << endl;
			cout << "enter year" << endl;
			cin >> current->year;
			cout << "enter day" << endl;
			cin >> current->day;
			cout << "enter month" << endl;
			cin >> current->month;
		}
		break;
		case 6:
		{
			float payment;
			int year;
			int month, day;
			int index1 = 0;
			customernode *current = cust.gethead();
			string id;
			cout << "Enter the ID of customer to search :  ";
			cin >> id;
			int index = 0;
			index = cust.searchcustomer(id);
			if (index == -1)
			{
				cout << "Customer is not registered" << endl;
			}
			else
			{
				for (int i = 0; i < index; i++)
				{
					current = current->next;
				}
				cout << "What is due date" << endl;
				cout << "year:day:month" << endl;
				cin >> year >> day >> month;
				cout << "Customer has paied :";
				cin >> payment;
				if (current->year > year) {
					if (current->month > month) {
						if (current->day > day) {
							current->balance = current->bill - payment + 100;
						}
					}
				}
				else
					current->balance = current->bill - payment;
			}
		}
		break;
		case 7:
		{
			cat.save();
		}
		break;
		default:
			cout << "invalid selection" << endl;
		}
		cout << "Press 1 to continue." << endl;
		cout << "Do you want to continue : ";
		cin >> choice;
	} while (choice == 1);
}
//system('pause');
